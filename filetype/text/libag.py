# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libag
else:
    import _libag

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


TAG_ID = _libag.TAG_ID
NUM_WORKERS = _libag.NUM_WORKERS
LIBAG_CASE_SMART = _libag.LIBAG_CASE_SMART
LIBAG_CASE_SENSITIVE = _libag.LIBAG_CASE_SENSITIVE
LIBAG_CASE_INSENSITIVE = _libag.LIBAG_CASE_INSENSITIVE
LIBAG_START_WORKERS = _libag.LIBAG_START_WORKERS
LIBAG_MANUAL_WORKERS = _libag.LIBAG_MANUAL_WORKERS
LIBAG_ONSEARCH_WORKERS = _libag.LIBAG_ONSEARCH_WORKERS
LIBAG_FLG_TEXT = _libag.LIBAG_FLG_TEXT
LIBAG_FLG_BINARY = _libag.LIBAG_FLG_BINARY
class ag_result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matches = property(_libag.ag_result_matches_get, _libag.ag_result_matches_set)
    file = property(_libag.ag_result_file_get, _libag.ag_result_file_set)
    nmatches = property(_libag.ag_result_nmatches_get, _libag.ag_result_nmatches_set)
    flags = property(_libag.ag_result_flags_get, _libag.ag_result_flags_set)

    def __init__(self):
        _libag.ag_result_swiginit(self, _libag.new_ag_result())
    __swig_destroy__ = _libag.delete_ag_result

# Register ag_result in _libag:
_libag.ag_result_swigregister(ag_result)

class ag_match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byte_start = property(_libag.ag_match_byte_start_get, _libag.ag_match_byte_start_set)
    byte_end = property(_libag.ag_match_byte_end_get, _libag.ag_match_byte_end_set)
    match = property(_libag.ag_match_match_get, _libag.ag_match_match_set)

    def __init__(self):
        _libag.ag_match_swiginit(self, _libag.new_ag_match())
    __swig_destroy__ = _libag.delete_ag_match

# Register ag_match in _libag:
_libag.ag_match_swigregister(ag_match)

class ag_search_stats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total_bytes = property(_libag.ag_search_stats_total_bytes_get, _libag.ag_search_stats_total_bytes_set)
    total_files = property(_libag.ag_search_stats_total_files_get, _libag.ag_search_stats_total_files_set)
    total_matches = property(_libag.ag_search_stats_total_matches_get, _libag.ag_search_stats_total_matches_set)
    total_file_matches = property(_libag.ag_search_stats_total_file_matches_get, _libag.ag_search_stats_total_file_matches_set)

    def __init__(self):
        _libag.ag_search_stats_swiginit(self, _libag.new_ag_search_stats())
    __swig_destroy__ = _libag.delete_ag_search_stats

# Register ag_search_stats in _libag:
_libag.ag_search_stats_swigregister(ag_search_stats)

class ag_config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    literal = property(_libag.ag_config_literal_get, _libag.ag_config_literal_set)
    disable_recurse_dir = property(_libag.ag_config_disable_recurse_dir_get, _libag.ag_config_disable_recurse_dir_set)
    casing = property(_libag.ag_config_casing_get, _libag.ag_config_casing_set)
    num_workers = property(_libag.ag_config_num_workers_get, _libag.ag_config_num_workers_set)
    workers_behavior = property(_libag.ag_config_workers_behavior_get, _libag.ag_config_workers_behavior_set)
    stats = property(_libag.ag_config_stats_get, _libag.ag_config_stats_set)
    search_binary_files = property(_libag.ag_config_search_binary_files_get, _libag.ag_config_search_binary_files_set)

    def __init__(self):
        _libag.ag_config_swiginit(self, _libag.new_ag_config())
    __swig_destroy__ = _libag.delete_ag_config

# Register ag_config in _libag:
_libag.ag_config_swigregister(ag_config)


def ag_start_workers():
    return _libag.ag_start_workers()

def ag_stop_workers():
    return _libag.ag_stop_workers()

def ag_set_config(ag_config):
    return _libag.ag_set_config(ag_config)

def ag_init():
    return _libag.ag_init()

def ag_init_config(config):
    return _libag.ag_init_config(config)

def ag_finish():
    return _libag.ag_finish()

def ag_search(query, npaths):
    return _libag.ag_search(query, npaths)

def ag_search_ts(query, npaths):
    return _libag.ag_search_ts(query, npaths)

def ag_get_stats(ret_stats):
    return _libag.ag_get_stats(ret_stats)

def ag_free_result(result):
    return _libag.ag_free_result(result)

def ag_free_all_results(results):
    return _libag.ag_free_all_results(results)


